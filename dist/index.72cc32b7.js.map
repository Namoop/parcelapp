{"mappings":"AAAO,MAAMA,EAAMC,SAASC,cAAc,UAC1CF,EAAIG,cAAgB,WAClB,OAAO,GAGTH,EAAII,MAAMC,OAAS,oBACnB,MAAMC,EAAMN,EAAIO,WAAW,MAmB3B,MAAMC,EAAU,GAYhB,IAAIC,EAAsBC,EAX1BV,EAAIW,UAAYX,EAAIY,QAAU,SAAUC,GAClB,GAAhBA,EAAEC,IAAIC,SACRP,EACEK,EAAEC,IAAIE,eAAiBH,EAAEC,IAAMD,EAAEC,IAAIG,cAAgBJ,EAAEC,IAAIE,eACzD,GACNR,EAAGK,EAAEC,KAAiB,WAAVD,EAAEK,KAAoBV,EAAGK,EAAEC,MAAQK,KAAKC,MAAQ,GAO9DpB,EAAIqB,YAAeR,IACfJ,EAAcC,GAAgB,CAACG,EAAES,QAAST,EAAEU,SAChDvB,EAAIwB,YAAeX,IACfJ,EAAcC,GAAgB,CAACG,EAAEY,QAAQ,GAAGH,QAAST,EAAEY,QAAQ,GAAGF,SAK5C,MAAKG,EAAA,EAAE,GAAM,GACvC,GAEA1B,EAAC2B,UAAA,SAAAd,GACDa,EAAAb,EAAAe,SAAI,GAEJ5B,EAAC6B,WAAA,SAAAhB,GACDa,EAAA,IAAG,GAED1B,EAA2D8B,YAAA,SAAAjB,GAC5Da,EAAAb,EAAAe,SAAA,KAEqDG,aAAA,SAAAlB,MAAsBH,GAAA,CAACG,EAAAY,QAAA,GAAAH,QAC3ET,EAAAY,QAAA,GAAAF,SAGCG,EAAA,IAAA,GC7DH,IAAIM,EADqB/B,SAASgC,eAAe,OAW7CC,YAAYlC,GAChB,MAAMmC,EAAMnC,EAAIO,WAAW,MAQd6B,EACA,EADAA,GAEL,EAFKA,GAGHC,OAAOC,WAAa,IAAM,aAM3BC,QAEPC,EAAIC,KAAKtB,KAAKC,OACPD,KAAKC,MAAQoB,EAAI,GAAK,KAAMA,EAAIE,QACvCP,EAAIQ,UAAU,EAAG,EAAG3C,EAAI4C,MAAO5C,EAAI6C,QACnC7C,EAAI4C,MAAQ,IAAMR,EAClBpC,EAAI6C,OAAS,IAAMT,aD1BnB,IAAK,IAAIU,KAAKC,OAAOC,OAAOC,SAC1B3C,EAAI4C,OACJ5C,EAAI6C,YAAcL,EAAEM,MAAQ,IAC5B9C,EAAI+C,UAAUP,EAAEQ,EAAGR,EAAES,GACrBjD,EAAIkD,OAAQV,EAAEW,UAAYC,KAAKC,GAAM,KACrCrD,EAAIsD,UACFd,EAAEe,IACF,EAAMf,EAAEe,IAAIjB,MAAQ,EAAKE,EAAEF,MAAS,IACpC,EAAME,EAAEe,IAAIhB,OAAS,EAAKC,EAAED,OAAU,IACrCC,EAAEe,IAAIjB,MAAQE,EAAEF,MAAS,IACzBE,EAAEe,IAAIhB,OAASC,EAAED,OAAU,KAE9BvC,EAAIwD,UCgBNC,GACA/B,IACAgC,UAAY,IAAIC,SAASC,GAAOlC,EAAekC,IAC1C9B,IACCA,EAAuB,EAAGC,OAAO8B,sBAAsB5B,GACtD6B,WAAW/B,OAAO8B,sBAAuB/B,EAAsBG,IAGxE,IACIC,EAAgB,GAEpB6B,QAAQC,yBAON/B,IAEFgC","sources":["src/setup.ts","src/main.ts"],"sourcesContent":["export const cnv = document.createElement('canvas');\r\ncnv.oncontextmenu = function () {\r\n  return false;\r\n};\r\n//const scale: number = (window.innerWidth - 20) / 800;\r\ncnv.style.border = '3px solid #000000';\r\nconst pen = cnv.getContext('2d');\r\n\r\nexport function draw(): void {\r\n  for (let i of Object.values(sprites)) {\r\n    pen.save();\r\n    pen.globalAlpha = i.alpha / 100;\r\n    pen.translate(i.x, i.y);\r\n    pen.rotate((i.direction * Math.PI) / 180);\r\n    pen.drawImage(\r\n      i.src,\r\n      0 - ((i.src.width / 2) * i.width) / 100,\r\n      0 - ((i.src.height / 2) * i.height) / 100,\r\n      (i.src.width * i.width) / 100,\r\n      (i.src.height * i.height) / 100\r\n    );\r\n    pen.restore();\r\n  }\r\n}\r\n\r\nconst kp: any = {};\r\ncnv.onkeydown = cnv.onkeyup = function (e) {\r\n  if (e.key.length == 1)\r\n    kp[\r\n      e.key.toLowerCase() == e.key ? e.key.toUpperCase() : e.key.toLowerCase()\r\n    ] = 0;\r\n  kp[e.key] = e.type == 'keydown' ? kp[e.key] || Date.now() : 0;\r\n  //const event = `key ${e.key} ${e.type.slice(3)}`;\r\n  //me.onEvent?.[event]?.(event, Date.now() - kp[e.key]);\r\n  //if (me.logEvents) console.log(event);\r\n};\r\n\r\nlet windowMouseX: number, windowMouseY: number;\r\ncnv.onmousemove = (e) =>\r\n  ([windowMouseX, windowMouseY] = [e.clientX, e.clientY]);\r\ncnv.ontouchmove = (e) =>\r\n  ([windowMouseX, windowMouseY] = [e.touches[0].clientX, e.touches[0].clientY]); //tap and place?\r\n\r\n/**Returns current mouse state [left, middle, right]\r\n *\r\n */\r\nconst mouseDown = [false, false, false];\r\ncnv.onmouseup = function (e) {\r\n  mouseDown[e.button] = false;\r\n};\r\ncnv.ontouchend = function (e) {\r\n  mouseDown[0] = false;\r\n};\r\ncnv.onmousedown = function (e) {\r\n  mouseDown[e.button] = true;\r\n  //for (let i of me.onclicks) if (e.button == i[1]) i[0](e);\r\n};\r\ncnv.ontouchstart = function (e) {\r\n  [windowMouseX, windowMouseY] = [e.touches[0].clientX, e.touches[0].clientY];\r\n  mouseDown[0] = true;\r\n  //for (let i of me.onclicks) if (e.button == i[1]) i[0](e);\r\n};\r\n//}\r\n","const app: HTMLElement = document.getElementById('app');\r\nlet resolveframe: Function;\r\n// window.sprites = {};\r\n// window.nextframe = new Promise((r) => (resolveframe = r));\r\n\r\n\r\n//import { toml } from './toml-loader';\r\nimport { cnv, draw } from './setup';\r\nimport { Sprite } from './Sprite.class';\r\n//console.log(config);\r\n\r\napp.appendChild(cnv);\r\nconst pen = cnv.getContext('2d');\r\n\r\n/**\r\n * Options that can change how the game runs\r\n * - Gamespeed: Time between ticks (milliseconds)\r\n * - Stop: Set to True to kill the loop\r\n * - Scale: How large the canvas will be\r\n */\r\nexport const runOptions = {\r\n  gamespeed: 0,\r\n  stop: false,\r\n  scale: (window.innerWidth - 20) / 800,\r\n};\r\n\r\nfunction init() {}\r\nfunction run() {}\r\n\r\nfunction loop(): void {\r\n  frame++;\r\n  fps.push(Date.now());\r\n  while (Date.now() - fps[0] > 1000) fps.shift();\r\n  pen.clearRect(0, 0, cnv.width, cnv.height);\r\n  cnv.width = 800 * runOptions.scale;\r\n  cnv.height = 400 * runOptions.scale;\r\n  run();\r\n  draw();\r\n  resolveframe();\r\n  nextframe = new Promise((r) => (resolveframe = r));\r\n  if (!runOptions.stop) {\r\n    if (runOptions.gamespeed > 0) window.requestAnimationFrame(loop);\r\n    else setTimeout(window.requestAnimationFrame, runOptions.gamespeed, loop);\r\n  }\r\n}\r\nlet frame = 0;\r\nlet fps: number[] = [];\r\n//config as global\r\nconsole.clear();\r\nasync function load() {\r\n  //let config = await toml();\r\n  //let bp = Number(config.splat)\r\n  //console.log(bp +1);\r\n\r\n  init();\r\n  loop();\r\n}\r\nload();\r\n"],"names":["$411221efd52537ac$export$8ae6e0ae57092510","document","createElement","oncontextmenu","style","border","$411221efd52537ac$var$pen","getContext","$411221efd52537ac$var$kp","$411221efd52537ac$var$windowMouseX","$411221efd52537ac$var$windowMouseY","onkeydown","onkeyup","e","key","length","toLowerCase","toUpperCase","type","Date","now","onmousemove","clientX","clientY","ontouchmove","touches","$411221efd52537ac$var$mouseDown","onmouseup","button","ontouchend","onmousedown","ontouchstart","$ad2bcec7a0192558$var$resolveframe","getElementById","appendChild","$ad2bcec7a0192558$var$pen","$ad2bcec7a0192558$export$fd899f5e5ffd3e59","window","innerWidth","$ad2bcec7a0192558$var$loop","$ad2bcec7a0192558$var$fps","push","shift","clearRect","width","height","i","Object","values","sprites","save","globalAlpha","alpha","translate","x","y","rotate","direction","Math","PI","drawImage","src","restore","$411221efd52537ac$export$e529deb2bfd496dc","nextframe","Promise","r","requestAnimationFrame","setTimeout","console","clear","$ad2bcec7a0192558$var$load"],"version":3,"file":"index.72cc32b7.js.map"}